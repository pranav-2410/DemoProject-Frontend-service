{"version":3,"sources":["Component/NavBar.js","Component/TextForm.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","React","createElement","className","data-bs-theme","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","placeholder","htmlFor","onClick","toggleDarkMode","TextForm","text","setText","useState","Fragment","style","color","backgroundColor","value","onChange","event","target","rows","converToUpper","upperCase","toUpperCase","showAlert","convertToLower","toLowerCase","convertToSpeech","utter","SpeechSynthesisUtterance","speechSynthesis","speak","clearText","words","split","includes","length","wordCount","Alert","alert","str","lower","charAt","slice","captialize","msg","prototype","PropTypes","string","about","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.958e42e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg bg-body-tertiary\" data-bs-theme={`${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <form className=\"d-flex mx-3\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n            <div className='component my-3 mx-3'>\r\n              <div className={`form-check form-switch text-${props.mode}`}>\r\n                  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Theam</label>\r\n                  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleDarkMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              </div>\r\n            </div>\r\n            {/* <div className='component my-3 mx-3'>\r\n              <div className={`form-check form-switch text-${props.mode}`}>\r\n                  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Blue Theam</label>\r\n                  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleBlueMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              </div>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavBar.prototype = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const converToUpper = ()=>{\r\n        let upperCase = text.toUpperCase();\r\n        setText(upperCase);\r\n        props.showAlert(\"Converted to Upper case\", \"Success\");\r\n    }\r\n\r\n    const convertToLower = ()=>{\r\n      setText(text.toLowerCase());\r\n      props.showAlert(\"Converted to Lower case\", \"success\");\r\n    }\r\n\r\n    const convertToSpeech = ()=>{\r\n      let utter = new SpeechSynthesisUtterance(text);\r\n      speechSynthesis.speak(utter);\r\n    }\r\n    const clearText=()=>{\r\n      setText(\"\")\r\n      props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    const OnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const wordCount=(text)=>{\r\n      let words = text.split(\" \");\r\n      if(words.includes(\"\")){\r\n        return words.length -1;\r\n      }\r\n      else{\r\n        return words.length;\r\n      }\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('') //Hook\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container my-3\" style={{color: props.mode===\"dark\"?\"black\":\"white\"}}>\r\n        <h2>Enter your Text below</h2>\r\n    <textarea className=\"form-control\" style={{backgroundColor: props.mode===\"dark\"?\"#e9ecef\":\"white\",color: \"black\"}} value={text} onChange={OnChange} id=\"exampleFormControlTextarea1\"   rows=\"8\"></textarea>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={converToUpper}>Convert to Upper Case</button>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={convertToLower}>Convert to Lower Case</button>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={convertToSpeech}>Convert to Speech</button>\r\n    <button className=\"btn btn-primary my-3 mx-2\" onClick={clearText}>Clear</button>\r\n    </div>\r\n\r\n    <div className=\"container my-5\" style={{color: props.mode===\"dark\"?\"black\":\"white\"}}>\r\n        <h2>Text Summary</h2>\r\n        <p>You'r text contains : Words: {wordCount(text)}, Characters: {text.length}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const captialize=(str)=>{\r\n        var lower = str.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n  return (\r\n    props.alert &&\r\n    <>\r\n    <div className={`alert alert-${props.alert.type.toLowerCase()}`} role=\"alert\">\r\n        <strong>{captialize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n</>\r\n  )\r\n}\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\n// import AboutUs from \"./Component/AboutUs\";\r\nimport NavBar from \"./Component/NavBar\";\r\nimport TextForm from \"./Component/TextForm\";\r\nimport Alert from \"./Component/Alert\";\r\nimport React from 'react'\r\n// import {\r\n//   Route,\r\n//   Routes,\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n  const [mode, setMode] = useState(\"dark\");\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert=(message,type)=>{\r\n    setAlert({\r\n      msg: message,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n\r\n  const toggleDarkMode = ()=>{\r\n    if(mode===\"light\"){\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Light mode is enabled!\", \"Success\");\r\n    }\r\n    else{\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"#1f2023\";\r\n      showAlert(\"Dark mode is enabled!\", \"Success\");\r\n    }\r\n  }\r\n  // const toggleBlueMode = ()=>{\r\n  //   if(mode===\"light\"){\r\n  //     setMode(\"dark\");\r\n  //     document.body.style.backgroundColor = \"white\";\r\n  //     showAlert(\"Light mode is enabled!\", \"Success\");\r\n  //   }\r\n  //   else{\r\n  //     setMode(\"light\");\r\n  //     document.body.style.backgroundColor = \"#051c33\";\r\n  //     showAlert(\"Dark Blue mode is enabled!\", \"Success\");\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <NavBar title=\"TextUtils\" about=\"About Us\" mode={mode} toggleDarkMode={toggleDarkMode} /*toggleBlueMode={toggleBlueMode}*//>\r\n      <Alert alert={alert}/>\r\n    \r\n      <div className=\"container my-3\">\r\n      <TextForm mode={mode} showAlert={showAlert}/>\r\n        {/* <Routes>\r\n          <Route path='/' element={<TextForm mode={mode} showAlert={showAlert}/>}/>\r\n          <Route path='/about' element={<AboutUs mode={mode} showAlert={showAlert}/>} />\r\n        </Routes> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n// import { BrowserRouter } from 'react-router-dom';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  // <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n    // </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}